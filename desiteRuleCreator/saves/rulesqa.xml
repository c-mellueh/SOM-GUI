<?xml version='1.0' encoding='UTF-8'?>
<xsi:qaExport xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" user="chris" date="2022-03-18T09:46:23" version="2.8.1">
  <elementSection>
    <container ID="48134ee0-6fea-4bdd-a549-5a3ffde4a389" name="Konsistenzprüfung">
      <checkrun ID="66cf63ce-5a53-429a-b1e1-be7cdf728940" name="Konsistenzprüfung" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="check_datatype" active="true" resume="false">
              <code><![CDATA[function check_datatype(name, pSet, return_format) {

    var svalue = pSet + name;
    //list = desiteAPI.getPropertyTypeListByObject(id, svalue)

		if (return_format == "xs:string") {

		alt_datatype = "xs:double"}

		else if (return_format == "xs:double") {

		alt_datatype = "xs:string"
}
	else {
	desiteResult("Check_Datatyp muss ergaenzt werden")
}


	//obj = list[0]
	

	prop1 = desiteAPI.getPropertyValue(id,svalue,return_format)
	prop2 = desiteAPI.getPropertyValue(id,svalue,alt_datatype)


	if (prop2 != undefined) {return false}
	else {return true}


}]]></code>
            </ruleScript>
            <ruleScript name="check_exist" active="true" resume="false">
              <code><![CDATA[function check_exist(name, Pset, return_format) {

    //Kontrolle, ob ein Attribut existiert, ohne dessen Wert zu überprüfen

    //Ausgabetexte

    var text1 = 'Eigenschaft ';
    var text2 = ' nicht vorhanden! ';
    var text3 = ' besitzt nicht den richtigen Wert!';
    var text4 = " ( Wert ist :";
    var text5 = "[Fehler ";

    var svalue = pSet + name;

    //Attribut wird aus Objekt gelesen
    var value = desiteAPI.getPropertyValue(id, svalue, return_format);

    //Kontrolle, ob Attribut existiert	
    if (value == undefined) {
        if (!check_datatype(name, pSet, return_format)) {
            desiteResult.addMessage("Eigenschaft " + svalue + " besitzt den falschen Datentyp! [Fehler 5]");
            return 1;
        } else {

            desiteResult.addMessage(text1 + svalue + text2 + text5 + "3]");
            return 1;
        }
    }

    //Wenn keine Fehler existieren ist die Prüfung erfolgreich abgeschlossen
    else {
        return 0;
    }
}]]></code>
            </ruleScript>
            <ruleScript name="check_format" active="true" resume="false">
              <code><![CDATA[function check_format(name, pSet, return_format, format_list) {

    //Kontrolle ob pSet+name dem Format format entsprechen
    //Ausgabetexte


    var text1 = 'Eigenschaft ';
    var text2 = ' nicht vorhanden! ';
    var text3 = ' besitzt nicht den richtigen Wert oder das richtige Format!';
    var text4 = " ( Wert ist :";
    var text5 = "[Fehler ";

    return_value = 0;

    var svalue = pSet + name;


    //Attribut wird aus Objekt gelesen
    var value = desiteAPI.getPropertyValue(id, svalue, return_format);

    //Kontrolle, ob Attribut existiert		
    if (value == undefined) {

        if (!check_datatype(name, pSet, return_format)) {
            desiteResult.addMessage("Eigenschaft " + svalue + " besitzt den falschen Datentyp! [Fehler 5]");
            return_value += 1;
        } else {
            desiteResult.addMessage(text1 + svalue + text2 + text5 + "3]");
            return_value += 1;
        }
    }


    for (i in format_list) {

        format = new RegExp(format_list[i], "i")

        //Kontrolle, ob Format eingehalten ist
        if (!format.test(value)) {
            return_value += 1;
        }
    }

    //Wenn keine Fehler existieren ist die Prüfung erfolgreich abgeschlossen
    if (return_value != format_list.lenght) {
        return 0;
    } else {
        desiteResult.addMessage(text1 + svalue + text3 + text4 + value + " ) " + text5 + "1]");
        return 1
    }
}]]></code>
            </ruleScript>
            <ruleScript name="check_list" active="true" resume="false">
              <code><![CDATA[function check_list(name, pSet, return_format, list) {

    //Kontrolle ob pSet+name sich in einer Liste (getrennt durch "," oder "/") wiederfinden (not enumerated list)

    //Ausgabetexte

    var text1 = 'Eigenschaft "';
    var text2 = '" nicht vorhanden! ';
    var text3 = ' entspricht nicht den Vorgaben in MEM!';
    var text4 = " ( Wert ist :";
    var text5 = "[Fehler ";
    var error = 0;
    var svalue = pSet + name;


    //Attribut wird aus Objekt gelesen
    var value = desiteAPI.getPropertyValue(id, svalue, return_format);

    //Kontrolle, ob Attribut existiert		
    if (value == undefined) {

        if (!check_datatype(name, pSet, return_format)) {
            desiteResult.addMessage("Eigenschaft " + svalue + " besitzt den falschen Datentyp! [Fehler 5]");
            return 1;
        } else {
            desiteResult.addMessage(text1 + svalue + text2 + text5 + "3]");
            return 1;
            error += 1;
        }
    }
    //Kontrolliert ob das Element in Liste enthalten ist 
    else if (list.indexOf(value) != -1) {
        return 0
    }




    //Kontrolle, durch welchen Seperator die Liste getrennt ist -> Liste dementsprechend aufteilen
    if (value.indexOf(",") != -1) {
        var val_list = value.split(",")
    } else if (value.indexOf("/") != -1) {
        var val_list = value.split("/")
    }


    //Wenn keine Trennzeichen vorhanden sind, besteht die Liste aus einem Element
    else {
        val_list = [value]
    }


    for (i in val_list) {

        val_list[i] = val_list[i].trim(); //evtl. Leerzeichen am Anfang und Ende beseitigen  


        //Kontrolle, ob Das Element aus val_list in list enthalten ist (Case-insensitive)
        if (list.indexOf(val_list[i]) == -1) {
            desiteResult.addMessage(text1 + svalue + '" (' + value + ") " + text3 + text5 + "1]");
            return 1;
            error += 1;
        }
    }
    //Wenn alle Werte in liste enthalten sind, ist die Prüfung erfolgreich abgeschlossen
    if (error == 0) {
        return 0;
    }
}]]></code>
            </ruleScript>
            <ruleScript name="check_range" active="true" resume="false">
              <code><![CDATA[function check_range(name, pSet, return_format, range) {

    //Kontrolliert, ob sich 	 pSet+name in einem Bestimmten Wertebereich bewegen

    //range[*][0] -> untere Grenze
    //range[*][1] -> obere Grenze

    //Ausgabetext	

    var text1 = 'Eigenschaft "';
    var text2 = '" nicht vorhanden! ';
    var text3 = '" liegt außerhalb des vorgegebenen Wertebereichs in MEM! ';
    var text4 = '" ( Wert ist : ';
    var text5 = "[Fehler ";
    var svalue = pSet + name;

    //Attribut wird aus Objekt gelesen
    var value = desiteAPI.getPropertyValue(id, svalue, return_format);
    //Kontrolle, ob Attribut existiert		
    if (value == undefined) {
        if (!check_datatype(name, pSet, return_format)) {
            desiteResult.addMessage("Eigenschaft " + svalue + " besitzt den falschen Datentyp! [Fehler 5]");
            return 1;
        } else {
            desiteResult.addMessage(text1 + svalue + text2 + text5 + "3]");
            return 1;
        }
    } else {

        //Wenn das Format xs:string ist, wird das Attribut in eine Float Zahl umgewandelt
        if (return_format == "xs:string") {
            val = parseFloat(value.replace(',', '.'))
        	console.log(val)
					if(isNaN(val)) {
					
					desiteResult.addMessage(svalue+" entspricht nicht den Vorgaben in MEM (Wert ist: '"+value+"') [Fehler 1]");
return 1

					}else {value = val}
					
					}



        //Anzahl der Wertebereiche

        var treffer = 0;

        if (desiteAPI.getPropertyUnit(svalue, return_format) == "m") {
            value = value / 1000
        }

        for (i = 0; i < range.length; i++) {
            if (range[i].length == 1) {
                if (value == range[i][0]) {
                    treffer += 1
                }
            } else {
                var untere_grenze = range[i][0];
                var obere_grenze = range[i][1];

                if (value >= untere_grenze && value <= obere_grenze) {
                    treffer += 1
                }
            }
        }

        if (treffer != 1) {
            desiteResult.addMessage(text1 + svalue + text3 + text5 + "2]");
            return 1;
        }
        //Kontrolle, ob das Attribt im Wertebereich liegt
        else {
            return 0
        }
    }
}]]></code>
            </ruleScript>
            <ruleScript name="check_start" active="true" resume="false">
              <code><![CDATA[id = desiteThis.ID()
desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", "Ungeprüft")


prop = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")

if (prop == "BIMR_Koordinationskoerper") {

desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", "Passed")

}]]></code>
            </ruleScript>
            <ruleScript name="koordinaten" active="true" resume="false">
              <code><![CDATA[var id = desiteThis.ID();

geo=[]
geo.push(desiteAPI.getPropertyValue(id,"cpCOGx","xs:double"))
geo.push(desiteAPI.getPropertyValue(id,"cpCOGy","xs:double"))
geo.push(desiteAPI.getPropertyValue(id,"cpCOGz","xs:double"))

val = true

container = desiteAPI.getPropertyValue(id,"cpIsContainer","xs:boolean")

if(!container) {

for (i in geo){
	loc = geo[i]
	bool = loc >-10000.00 && loc < 10000.00
	console.log(bool)	
	val = val	&& bool
}
if (!val) {
desiteResult.addMessage("Koordinaten passen nicht zum Rest des Modelles![Fehler 9]")
desiteResult.setCheckState('Warning');
}
}]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="db297838-2213-4048-bd4e-0de6e732a13c" name="OLA-Mast" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="OLA-Mast" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['OLA-Mast'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'3443' ,'4214' ,'Abstellgleis']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Stahl' ,'Beton' ,'Aluminium' ,'Metall']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Mastnummer';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Oberleitungsanlagen']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Masttyp';
	    return_format= "xs:string";
	    var list = ['Winkelmast' ,'Flachmast' ,'Schleuderbetonmast' ,'IPB-Mast']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="d8d88b5a-6bf1-4f52-a192-205750b57669" name="Kabelschacht" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Kabelschacht" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Kabelschacht'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'3443' ,'4214' ,'Keine Zuordnung']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3'], ['-']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3'], ['-']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Stahl' ,'Beton' ,'Metall']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Kabeltiefbau']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="331a9f20-472b-431b-a475-82cf69f733f6" name="Kabelkanal" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Kabelkanal" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Kabelkanal'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'3443' ,'4214' ,'Keine Zuordnung']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3'], ['-']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3'], ['-']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Stahl' ,'Beton' ,'Metall']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Kabeltiefbau']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="eb6096c6-7a49-4c14-b4ce-611e6eb570ad" name="Signal" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Signal" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Signal'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'3443' ,'4214']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.4']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.4']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Stahl' ,'Beton' ,'Kunststoff' ,'Aluminium']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Leit- & Sicherungstechnik']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Signalnummer';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Signaltyp';
	    return_format= "xs:string";
	    var list = ['Vorsignal' ,'Hauptsignal' ,'Zusatzsignal' ,'Geschwindigkeitssignal' ,'Langsamfahrsignal' ,'Rautentafel' ,'Schutzsignal' ,'Weichensignal' ,'Fahrleitungssignal']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="83236fd1-d5d1-4926-b3ac-38a4ce933853" name="Magnet" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Magnet" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Magnet'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'3443' ,'4214']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Stahl' ,'Beton' ,'Metall' ,'Kunststoff' ,'Aluminium']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Leit- & Sicherungstechnik']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="cf6838d2-6a4f-4fff-91b4-4c475241cf72" name="Kabeltopf" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Kabeltopf" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Kabeltopf'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'3443' ,'4214']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Stahl' ,'Beton' ,'Metall' ,'Aluminium' ,'Kunststoff']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Leit- & Sicherungstechnik']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="be47ffcd-a4f6-4770-a812-622ee0e2c8e7" name="KM-Stein" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="KM-Stein" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['KM-Stein'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'3443' ,'4214']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Stahl' ,'Beton' ,'Metall' ,'Aluminium' ,'Kunststoff']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Leit- & Sicherungstechnik']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="f34b326b-349a-4b6e-80c1-9ebf5444599c" name="Achszähler" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Achszähler" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Achszähler'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'3443' ,'4214']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Stahl' ,'Beton' ,'Metall' ,'Aluminium' ,'Kunststoff']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Leit- & Sicherungstechnik']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="da9be45b-5259-42a4-a71b-340f1bc7f742" name="Schachbretttafel" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Schachbretttafel" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Schachbretttafel'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'3443' ,'4214']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Stahl' ,'Beton' ,'Metall' ,'Kunststoff' ,'Aluminium']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Leit- & Sicherungstechnik']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="3c447200-d7a5-47a6-9bf6-ce3b2b30ed5f" name="Grenzzeichen" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Grenzzeichen" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Grenzzeichen'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'3443' ,'4214']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Stahl' ,'Beton' ,'Metall' ,'Aluminium' ,'Kunststoff']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Leit- & Sicherungstechnik']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="4b96fab1-ba16-4172-85f3-8ba390194c69" name="Schaltschrank" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Schaltschrank" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Schaltschrank'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'3443' ,'4214']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Stahl' ,'Beton' ,'Metall' ,'Aluminium' ,'Kunststoff']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Leit- & Sicherungstechnik']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="13b72815-834a-46bf-8e1b-2f9249966d0a" name="Sprechstelle" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Sprechstelle" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Sprechstelle'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'3443' ,'4214']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Stahl' ,'Beton' ,'Aluminium' ,'Metall' ,'Kunststoff']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Leit- & Sicherungstechnik']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="9e9ec1ef-cb52-49d4-9255-e4e84274c601" name="Vorsignalbake" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Vorsignalbake" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Vorsignalbake'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'3443' ,'4214']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Stahl' ,'Beton' ,'Metall' ,'Kunststoff' ,'Aluminium']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Leit- & Sicherungstechnik']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Entfernungsangabe';
	    return_format= "xs:string";
	    var list = ['100m' ,'200m' ,'300m' ,'400m' ,'500m']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="21779d40-2c27-4150-af77-0f30eb804d08" name="BÜ-LST" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="BÜ-LST" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['BÜ-LST'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'4214']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Stahl' ,'Beton' ,'Metall' ,'Kunststoff']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Bahnübergang']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'BÜ-LST-Typ';
	    return_format= "xs:string";
	    var list = ['BÜ-Tafel' ,'Lichtsignal mit Andreaskreuz' ,'Bahnschranke']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="acdd9288-aebd-490d-86af-5cac672bacfd" name="BÜ-Objekte" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="BÜ-Objekte" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['BÜ-Objekte'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Stahl' ,'Beton' ,'Metall' ,'Kunststoff']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Bahnübergang']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="22e5b0cd-7a69-44cd-afdc-10c50f7512e6" name="Lärmschutzwand" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Lärmschutzwand" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Lärmschutzwand'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'3443' ,'4214' ,'Keine Zuordnung']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3'], ['-']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3'], ['-']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahl' ,'Beton' ,'Stahlbeton' ,'Kunststoff' ,'Aluminium' ,'Metall']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Lärmschutzanlagen']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="8aa3a574-352c-4fca-84c2-a244d8734c3d" name="Schiene" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Schiene" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Schiene'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'3443' ,'4214' ,'-' ,'Abstellgleis']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:double";
range = [['62.0', '73'], ['25', '26.8'], ['3', '4.32'], ['0', '0.8']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:double";
range = [['62.0', '73'], ['25', '26.8'], ['3', '4.32'], ['0', '0.8']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahl']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['Trassendaten in DB_REF 2016' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Streckenoberbau']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Schienentyp';
	    return_format= "xs:string";
	    var list = ['Schwere Vignolschiene']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Gleisnummer';
	    return_format= "xs:string";
	    var list = ['Gl.1 (Richtungsgleis)' ,'Gl.2 (Gegenrichtungsgleis)' ,'Keine Angaben']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="98bc5e00-8e5c-4b1b-8e05-68bc63e6a124" name="Schwelle" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Schwelle" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Schwelle'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'3443' ,'4214' ,'-' ,'Abstellgleis']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:double";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.32'], ['0', '0.8']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:double";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.32'], ['0', '0.8']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Beton' ,'Holz']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['Trassendaten in DB_REF 2016' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Streckenoberbau']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Schwellentyp';
	    return_format= "xs:string";
	    var list = ['Betonschwelle' ,'Holzschwelle']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Gleisnummer';
	    return_format= "xs:string";
	    var list = ['Gl.1 (Richtungsgleis)' ,'Gl.2 (Gegenrichtungsgleis)' ,'Keine Angaben']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="6e17d895-2667-4fe3-a58b-7a0b2922b391" name="Gleisbettung" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Gleisbettung" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Gleisbettung'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'3443' ,'4214' ,'-' ,'Abstellgleis']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:double";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.32'], ['0', '0.8']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:double";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.32'], ['0', '0.8']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Schotter']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['03/2021' ,'07-10/2020' ,'11/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = ['Querschnitt-Typ des Gleisbetts nach RiL 820.2010']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['Trassendaten in DB_REF 2016' ,'Drohnenbeflug']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020' ,'06/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Streckenoberbau']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Gleisnummer';
	    return_format= "xs:string";
	    var list = ['Gl.1 (Richtungsgleis)' ,'Gl.2 (Gegenrichtungsgleis)' ,'Keine Angaben']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Oberbautyp';
	    return_format= "xs:string";
	    var list = ['Schotteroberbau']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Volumen';
	    return_format= "xs:double";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="43c0d515-600b-4c90-a448-108da53307c0" name="Baumbestand" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Baumbestand" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Baumbestand'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['03/2021' ,'07-10/2020' ,'11/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = ['Symbolische Darstellung' ,'Baum-Bemaßung Annahme']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['Drohnenbeflug']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Umwelt']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="6c2dd880-a66f-49ba-9c01-3d374fae3d2c" name="Widerlager" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Widerlager" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Widerlager'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'3443']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahl' ,'Stahlbeton' ,'Aluminium' ,'Beton' ,'Metall' ,'Mauerwerk']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Konstruktive Ingenieurbauwerke']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bauwerksbuch';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Bauwerksnummer';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Technischer Platz';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'KIB-Typ';
	    return_format= "xs:string";
	    var list = ['EÜ' ,'SÜ' ,'Durchlass']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="759329ef-8316-4fc0-a47d-750f69f4e8a0" name="Pfeiler" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Pfeiler" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Pfeiler'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'3443']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahl' ,'Stahlbeton' ,'Aluminium' ,'Beton' ,'Metall' ,'Stein']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Konstruktive Ingenieurbauwerke']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bauwerksbuch';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Bauwerksnummer';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Technischer Platz';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'KIB-Typ';
	    return_format= "xs:string";
	    var list = ['EÜ' ,'SÜ' ,'Durchlass']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="a05ec44b-2ec4-4f29-b1c3-65151782c585" name="Stütze" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Stütze" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Stütze'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'3443']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahl' ,'Stahlbeton' ,'Aluminium' ,'Beton' ,'Metall' ,'Stein']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Konstruktive Ingenieurbauwerke']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bauwerksbuch';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Bauwerksnummer';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Technischer Platz';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'KIB-Typ';
	    return_format= "xs:string";
	    var list = ['EÜ' ,'SÜ' ,'Durchlass']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="4f4ea4ad-5bfa-4ba8-af00-daedcaed6c9f" name="Kappe" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Kappe" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Kappe'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'3443']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahl' ,'Stahlbeton' ,'Aluminium' ,'Beton' ,'Metall' ,'Stein']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Konstruktive Ingenieurbauwerke']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bauwerksbuch';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Bauwerksnummer';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Technischer Platz';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'KIB-Typ';
	    return_format= "xs:string";
	    var list = ['EÜ' ,'SÜ' ,'Durchlass']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="fa9869f6-b9d5-4ffc-89d3-e9c4a17b0d11" name="Flügelmauer" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Flügelmauer" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Flügelmauer'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'3443']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahl' ,'Stahlbeton' ,'Aluminium' ,'Beton' ,'Metall' ,'Stein' ,'Mauerwerk']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Konstruktive Ingenieurbauwerke']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bauwerksbuch';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Bauwerksnummer';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Technischer Platz';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'KIB-Typ';
	    return_format= "xs:string";
	    var list = ['EÜ' ,'SÜ' ,'Durchlass']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="5c3b6732-67c5-495d-a682-5c8f38b1b211" name="Überbau" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Überbau" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Überbau'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'3443']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahl' ,'Stahlbeton' ,'Aluminium' ,'Beton' ,'Metall' ,'Mauerwerk']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Konstruktive Ingenieurbauwerke']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bauwerksbuch';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Bauwerksnummer';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Technischer Platz';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'KIB-Typ';
	    return_format= "xs:string";
	    var list = ['EÜ' ,'SÜ' ,'Durchlass']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="597d1a41-44ef-47d7-b033-5e809cca523a" name="Lager" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Lager" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Lager'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'3443']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahl' ,'Stahlbeton' ,'Aluminium' ,'Beton' ,'Metall' ,'Stein']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Konstruktive Ingenieurbauwerke']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bauwerksbuch';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Bauwerksnummer';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Technischer Platz';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'KIB-Typ';
	    return_format= "xs:string";
	    var list = ['EÜ' ,'SÜ' ,'Durchlass']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="c9625da2-0717-42ca-8a4b-4236303fa8ef" name="Stützmauer" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Stützmauer" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Stützmauer'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'3443']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahl' ,'Stahlbeton' ,'Aluminium' ,'Beton' ,'Metall' ,'Stein']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Konstruktive Ingenieurbauwerke']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bauwerksbuch';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Bauwerksnummer';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Technischer Platz';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'KIB-Typ';
	    return_format= "xs:string";
	    var list = ['EÜ' ,'SÜ' ,'Durchlass']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="74c7962d-3ea9-4f4f-a866-65bc99cd16d3" name="Straße" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Straße" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Straße'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Asphalt' ,'Pflaster' ,'Bordstein' ,'unbefestigt']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Straßenbau']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Straßenname';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="35fde790-d91d-4588-86f3-f12cbab6c495" name="Verkehrszeichen" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Verkehrszeichen" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Verkehrszeichen'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Stahl' ,'Beton' ,'Metall' ,'Kunststoff' ,'Holz' ,'Aluminium']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Technische Ausstattung Straße']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="ee2786c2-344e-4843-b92c-8b5eaac184cc" name="Schranke" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Schranke" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Schranke'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Stahl' ,'Beton' ,'Metall' ,'Kunststoff' ,'Holz' ,'Aluminium']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Technische Ausstattung Straße']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="1aadeacd-20da-472e-ac64-4102ec5abdc1" name="Zaun" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Zaun" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Zaun'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Stahl' ,'Beton' ,'Metall' ,'Kunststoff' ,'Holz' ,'Aluminium']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Technische Ausstattung Straße']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="43177e56-1d55-47d0-9ab7-e57bc33a7400" name="Beleuchtungsmast" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Beleuchtungsmast" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Beleuchtungsmast'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Stahl' ,'Beton' ,'Metall' ,'Kunststoff' ,'Holz' ,'Aluminium']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Technische Ausstattung Straße']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="c0493a6e-5691-4809-b231-2d4efa4d577f" name="Leitplanke" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Leitplanke" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Leitplanke'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Stahl' ,'Beton' ,'Metall' ,'Kunststoff' ,'Holz' ,'Aluminium']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Technische Ausstattung Straße']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="1bc4c5e4-8bbd-41ef-b212-26a5e9596955" name="Fundament" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Fundament" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Fundament'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'3443']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Stahl' ,'Beton' ,'Metall' ,'Kunststoff' ,'Holz' ,'Aluminium']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Technische Ausstattung Straße' ,'Konstruktive Ingenieurbauwerke']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="d1ed2577-5697-47c6-8954-8f7b57da7f3f" name="Mauer" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Mauer" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Mauer'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Stahl' ,'Beton' ,'Metall' ,'Kunststoff' ,'Holz' ,'Aluminium']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Technische Ausstattung Straße']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="0db187bb-ad9b-4fac-9de4-0df63d2587ae" name="Pfosten" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Pfosten" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Pfosten'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Stahl' ,'Beton' ,'Metall' ,'Kunststoff' ,'Holz' ,'Aluminium']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Technische Ausstattung Straße']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="c43b83c0-e579-49cf-ac68-1718a1e77b0e" name="Tor" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Tor" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Tor'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Stahl' ,'Beton' ,'Metall' ,'Kunststoff' ,'Holz' ,'Aluminium']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Technische Ausstattung Straße']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="e07fa81e-44b3-43ae-be74-1daf8798818a" name="Straßenabläufe" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Straßenabläufe" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Straßenabläufe'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Entwässerung Straße']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="b941e109-fefe-4a11-a8f1-9564dc1a2092" name="Entwässerungsschacht" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Entwässerungsschacht" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Entwässerungsschacht'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'3443' ,'4214']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Beton']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Entwässerung Gleis' ,'Entwässerung Straße']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="8876c0df-197b-4e3b-b1fb-c175b156e191" name="Straßenablauf" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Straßenablauf" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Straßenablauf'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Entwässerung Straße']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Objekttyp';
	    return_format= "xs:string";
	    var list = ['Straßenablauf']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="23fc78a7-5870-4168-872c-f69bc794244d" name="Gebäude" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Gebäude" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Gebäude'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Stahl']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['CityGML' ,'Drohnenbeflug' ,'stationärer Laserscan' ,'Stationärer Laserscan' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['CityGML']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = ['Von Vermessungsamt inkl. Erweiterung von GI-CONSULT' ,'-']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="ca723f1f-23b3-4683-91eb-be602e5b5228" name="Gehweg" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Gehweg" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Gehweg'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Asphalt' ,'Pflaster' ,'Bordstein']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Straßenbau']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Straßenname';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="471734f1-e1f1-4eda-b3f5-f9927da6d9b3" name="Ankerfundament" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Ankerfundament" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Ankerfundament'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'3443' ,'4214']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Stahl' ,'Beton' ,'Aluminium' ,'Metall']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Oberleitungsanlagen']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="b340ce0a-5fc5-497f-9a10-e9ccb2c51a4b" name="Kabelkanal-Stütze" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Kabelkanal-Stütze" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Kabelkanal-Stütze'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'3443' ,'4214' ,'Keine Zuordnung']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Stahl' ,'Beton' ,'Metall']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Kabeltiefbau']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="b106fd9c-f2ec-44ac-be7e-19cd3ba1a746" name="Bahnsteigbelag" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Bahnsteigbelag" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Bahnsteigbelag'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Stahl' ,'Beton' ,'Metall' ,'Kunststoff' ,'Aluminium' ,'Holz']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Verkehrsanlagen']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="df0f7eef-4174-4f14-84ee-7bfd47bbad55" name="Bahnsteig-Kantenstein" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Bahnsteig-Kantenstein" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Bahnsteig-Kantenstein'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Stahl' ,'Beton' ,'Metall' ,'Kunststoff' ,'Aluminium' ,'Holz']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Verkehrsanlagen']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="34c963eb-e07e-4dad-a593-b1ebceefa65b" name="Empfangsgebäude" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Empfangsgebäude" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Empfangsgebäude'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Stahl' ,'Beton' ,'Metall' ,'Kunststoff' ,'Aluminium' ,'Holz' ,'Glas' ,'unbekannt']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020' ,'04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Verkehrsanlagen']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="822be7a2-8f4d-47e0-8bca-ec69f2b0d663" name="VA-Ausrüstung" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="VA-Ausrüstung" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['VA-Ausrüstung'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62', '73']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62', '73']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Stahl' ,'Beton' ,'Metall' ,'Kunststoff' ,'Glas' ,'Aluminium' ,'unbekannt']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Verkehrsanlagen']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="aac451e4-dc02-4371-8bd2-2e87f2030b92" name="Entwässerungsablauf" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Entwässerungsablauf" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Entwässerungsablauf'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'3443' ,'4214']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Beton']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Entwässerung Gleis' ,'Entwässerung Straße']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="5fba1553-1bfd-4c2b-a212-a8e25be99aaf" name="Entwässerungsrinne" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Entwässerungsrinne" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Entwässerungsrinne'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'3443' ,'4214']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Beton']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Entwässerung Gleis' ,'Entwässerung Straße']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="ae1c7368-7a92-4fa3-b884-b660199648dc" name="Stützbauwerk" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Stützbauwerk" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Stützbauwerk'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'3443' ,'4214']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Konstruktive Ingenieurbauwerke']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="94223855-c44e-492d-a0b9-1cf35429bc24" name="Stützbauwerk-Ausrüstung" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Stützbauwerk-Ausrüstung" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Stützbauwerk-Ausrüstung'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'3443' ,'4214']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0', '73.0']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0', '73.0']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Beton' ,'Stahl' ,'Kunststoff' ,'Metall']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Konstruktive Ingenieurbauwerke']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ausrüstungstyp';
	    return_format= "xs:string";
	    var list = ['Geländer' ,'Treppe' ,'Pflaster' ,'Fundament' ,'Zaun' ,'Betonschicht']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="98302463-05f5-4c03-909e-ee7ebc483ae1" name="Brücken-Ausrüstung" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Brücken-Ausrüstung" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Brücken-Ausrüstung'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'3443']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahl' ,'Stahlbeton' ,'Aluminium' ,'Beton' ,'Metall' ,'Stein' ,'Pflaster']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Konstruktive Ingenieurbauwerke']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bauwerksnummer';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Technischer Platz';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'KIB-Typ';
	    return_format= "xs:string";
	    var list = ['EÜ' ,'SÜ' ,'Durchlass']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bauwerksbuch';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Ausrüstungstyp';
	    return_format= "xs:string";
	    var list = ['Geländer' ,'Abwasserrohr' ,'Rohrstütze' ,'Schild' ,'Fahrleitungsschutz' ,'Schacht' ,'Beleuchtung' ,'Treppe' ,'Pflaster' ,'Schotterfang' ,'Lampe']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="b2c53c58-f356-438d-b9e8-67e654190e5a" name="Gelände" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Gelände" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Gelände'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = ['-']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['DGM']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="4126c82d-1ad5-46ae-ac19-9cc83103a131" name="Kabelmerkstein" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="Kabelmerkstein" active="true" resume="true">
              <code><![CDATA[
var id = desiteThis.ID()
var isContainer = desiteAPI.getPropertyValue(id,'cpIsContainer','xs:boolean');
var isComposite = desiteAPI.getPropertyValue(id,'cpIsComposite','xs:boolean');

var ident_pset = 'Bestandsdaten:'
var pSet = 'Bestandsdaten:' ;
var type = 'IfcBuildingElementProxy'; var objectName = desiteAPI.getPropertyValue(id,"ifcTypeObjectName","xs:string")
var ident = 'Objekttyp';
var otyp= ['Kabelmerkstein'];	var valueIfcType = desiteAPI.getPropertyValue(id,'ifcType','xs:string');
var otyp_vorhanden = desiteAPI.getPropertyValue(id, ident_pset+ident, 'xs:string');

if (isContainer == true && isComposite == false) {
	desiteResult.setCheckState('ignored');
    desiteResult.addMessage('Container was ignored.');
}else if (otyp.indexOf(otyp_vorhanden)!=-1) {

        var checkfailed = 0;
        var Anzahl =0;

        Anzahl+=1;
        name= 'Strecke';
	    return_format= "xs:string";
	    var list = ['4020' ,'3443' ,'4214' ,'Keine Zuordnung']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'km (von)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3'], ['-']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'km (bis)';
	    return_format= "xs:string";
range = [['62.0 ', ' 73'], ['25 ', ' 26.8'], ['3 ', ' 4.3'], ['-']];
	    checkfailed+=check_range(name,pSet,return_format,range);

        Anzahl+=1;
        name= 'Material';
	    return_format= "xs:string";
	    var list = ['Stahlbeton' ,'Stahl' ,'Beton' ,'Metall']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Ersteller';
	    return_format= "xs:string";
	    var list = ['GI-CONSULT GmbH']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Erstellungsdatum';
	    return_format= "xs:string";
	    var list = ['07-10/2020' ,'11/2020' ,'03/2021']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Bemerkung';
	    return_format= "xs:string";
	    var list = []
checkfailed +=check_exist(name,pSet,return_format);


        Anzahl+=1;
        name= 'Modellierungsgrundlage';
	    return_format= "xs:string";
	    var list = ['tachymetrisches Aufmaß' ,'Stationärer Laserscan' ,'stationärer Laserscan' ,'Drohnenbeflug' ,'Plandokument']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Vermessungsdatum';
	    return_format= "xs:string";
	    var list = ['04-06/2020']
        checkfailed +=check_list(name,pSet,return_format,list);

        Anzahl+=1;
        name= 'Fachmodell';
	    return_format= "xs:string";
	    var list = ['Kabeltiefbau']
        checkfailed +=check_list(name,pSet,return_format,list);

        var check_status = "Undefined"
        if (checkfailed == 0) {
            desiteResult.setCheckState('passed'); check_status = "Passed"
        }


    if (Anzahl == checkfailed) {
        desiteResult.setCheckState('failed');
        check_status = "Failed"
        desiteResult.addMessage('Keine der geforderten Eigenschaften vorhanden!');
    }

    if (checkfailed < Anzahl && checkfailed != 0) {
        desiteResult.setCheckState('warning');
        check_status = "Warning";
    }

    desiteAPI.setPropertyValue( id , "Check_State" , "xs:string", check_status);
    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",Anzahl);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",checkfailed);

}
else {
    desiteResult.setCheckState('ignored');
    }
]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
        <rule type="UniquePattern">
          <patternList/>
        </rule>
        <code></code>
      </checkrun>
      <checkrun ID="9e2e90fa-6c93-44bd-9d53-31926d3ac343" name="Ungetestet" active="true" user="chris" date="2022-03-18T09:46:23" state="0" objectsOnly="1" partsOfComposites="0" createFailed="true" createWarnings="true" createIgnored="false" createPassed="true" createUndefined="false">
        <rule type="Attributes">
          <attributeRuleList>
            <ruleScript name="ungetestet" active="true" resume="false">
              <code><![CDATA[id = desiteThis.ID()
pset = "Bestandsdaten:"


status = desiteAPI.getPropertyValue(id, "Check_State", "xs:string")
objekttyp = desiteAPI.getPropertyValue(id,pset+"Objekttyp","xs:string")
console.log(status)

if (status == "Ungeprüft") {
    desiteResult.setCheckState('failed');

    check_status = "Failed"
	desiteAPI.setPropertyValue(id, "Check_State", "xs:string", check_status);

} 

if (objekttyp == undefined) {
    desiteResult.addMessage(pset+"Objekttyp existiert nicht -> Prüfung kann nicht durchgeführt Werden [Fehler 8]");
	desiteAPI.setPropertyValue(id, "Check_State", "xs:string", "Failed");
desiteResult.setCheckState("Failed")

} else {
    desiteResult.addMessage(pset+"Objekttyp (" + objekttyp + ") konnte nicht in MEM gefunden werden [Fehler 7]")
}

    desiteAPI.setPropertyValue(id, "zu_pruefende_eigenschaften","xs:int",1);
    desiteAPI.setPropertyValue(id, "fehlerhafte_eigenschaften","xs:int",1);]]></code>
            </ruleScript>
          </attributeRuleList>
        </rule>
      </checkrun>
    </container>
  </elementSection>
  <dataSection>
    <checkRunData refID="66cf63ce-5a53-429a-b1e1-be7cdf728940">
      <checkSet/>
    </checkRunData>
    <checkRunData refID="db297838-2213-4048-bd4e-0de6e732a13c">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;OLA-Mast&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="d8d88b5a-6bf1-4f52-a192-205750b57669">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Kabelschacht&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="331a9f20-472b-431b-a475-82cf69f733f6">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Kabelkanal&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="eb6096c6-7a49-4c14-b4ce-611e6eb570ad">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Signal&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="83236fd1-d5d1-4926-b3ac-38a4ce933853">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Magnet&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="cf6838d2-6a4f-4fff-91b4-4c475241cf72">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Kabeltopf&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="be47ffcd-a4f6-4770-a812-622ee0e2c8e7">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;KM-Stein&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="f34b326b-349a-4b6e-80c1-9ebf5444599c">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Achszähler&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="da9be45b-5259-42a4-a71b-340f1bc7f742">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Schachbretttafel&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="3c447200-d7a5-47a6-9bf6-ce3b2b30ed5f">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Grenzzeichen&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="4b96fab1-ba16-4172-85f3-8ba390194c69">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Schaltschrank&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="13b72815-834a-46bf-8e1b-2f9249966d0a">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Sprechstelle&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="9e9ec1ef-cb52-49d4-9255-e4e84274c601">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Vorsignalbake&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="21779d40-2c27-4150-af77-0f30eb804d08">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;BÜ-LST&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="acdd9288-aebd-490d-86af-5cac672bacfd">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;BÜ-Objekte&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="22e5b0cd-7a69-44cd-afdc-10c50f7512e6">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Lärmschutzwand&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="8aa3a574-352c-4fca-84c2-a244d8734c3d">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Schiene&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="98bc5e00-8e5c-4b1b-8e05-68bc63e6a124">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Schwelle&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="6e17d895-2667-4fe3-a58b-7a0b2922b391">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Gleisbettung&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="43c0d515-600b-4c90-a448-108da53307c0">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Baumbestand&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="6c2dd880-a66f-49ba-9c01-3d374fae3d2c">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Widerlager&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="759329ef-8316-4fc0-a47d-750f69f4e8a0">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Pfeiler&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="a05ec44b-2ec4-4f29-b1c3-65151782c585">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Stütze&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="4f4ea4ad-5bfa-4ba8-af00-daedcaed6c9f">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Kappe&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="fa9869f6-b9d5-4ffc-89d3-e9c4a17b0d11">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Flügelmauer&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="5c3b6732-67c5-495d-a682-5c8f38b1b211">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Überbau&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="597d1a41-44ef-47d7-b033-5e809cca523a">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Lager&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="c9625da2-0717-42ca-8a4b-4236303fa8ef">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Stützmauer&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="74c7962d-3ea9-4f4f-a866-65bc99cd16d3">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Straße&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="35fde790-d91d-4588-86f3-f12cbab6c495">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Verkehrszeichen&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="ee2786c2-344e-4843-b92c-8b5eaac184cc">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Schranke&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="1aadeacd-20da-472e-ac64-4102ec5abdc1">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Zaun&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="43177e56-1d55-47d0-9ab7-e57bc33a7400">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Beleuchtungsmast&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="c0493a6e-5691-4809-b231-2d4efa4d577f">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Leitplanke&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="1bc4c5e4-8bbd-41ef-b212-26a5e9596955">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Fundament&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="d1ed2577-5697-47c6-8954-8f7b57da7f3f">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Mauer&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="0db187bb-ad9b-4fac-9de4-0df63d2587ae">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Pfosten&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="c43b83c0-e579-49cf-ac68-1718a1e77b0e">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Tor&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="e07fa81e-44b3-43ae-be74-1daf8798818a">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Straßenabläufe&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="b941e109-fefe-4a11-a8f1-9564dc1a2092">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Entwässerungsschacht&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="8876c0df-197b-4e3b-b1fb-c175b156e191">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Straßenablauf&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="23fc78a7-5870-4168-872c-f69bc794244d">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Gebäude&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="ca723f1f-23b3-4683-91eb-be602e5b5228">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Gehweg&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="471734f1-e1f1-4eda-b3f5-f9927da6d9b3">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Ankerfundament&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="b340ce0a-5fc5-497f-9a10-e9ccb2c51a4b">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Kabelkanal-Stütze&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="b106fd9c-f2ec-44ac-be7e-19cd3ba1a746">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Bahnsteigbelag&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="df0f7eef-4174-4f14-84ee-7bfd47bbad55">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Bahnsteig-Kantenstein&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="34c963eb-e07e-4dad-a593-b1ebceefa65b">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Empfangsgebäude&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="822be7a2-8f4d-47e0-8bca-ec69f2b0d663">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;VA-Ausrüstung&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="aac451e4-dc02-4371-8bd2-2e87f2030b92">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Entwässerungsablauf&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="5fba1553-1bfd-4c2b-a212-a8e25be99aaf">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Entwässerungsrinne&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="ae1c7368-7a92-4fa3-b884-b660199648dc">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Stützbauwerk&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="94223855-c44e-492d-a0b9-1cf35429bc24">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Stützbauwerk-Ausrüstung&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="98302463-05f5-4c03-909e-ee7ebc483ae1">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Brücken-Ausrüstung&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="b2c53c58-f356-438d-b9e8-67e654190e5a">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Gelände&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="4126c82d-1ad5-46ae-ac19-9cc83103a131">
      <filterList>
        <filter name="Bestandsdaten:Objekttyp" dt="xs:string" pattern="&quot;Kabelmerkstein&quot;"/>
      </filterList>
    </checkRunData>
    <checkRunData refID="9e2e90fa-6c93-44bd-9d53-31926d3ac343">
      <filterList>
        <filter name="Check_State" dt="xs:string" pattern="&quot;Ungeprüft&quot;"/>
      </filterList>
    </checkRunData>
  </dataSection>
  <repository>
    <propertyTypeSection>
      <ptype key="1" name="Bestandsdaten:Objekttyp" datatype="xs:string" unit="" inh="true"/>
    </propertyTypeSection>
    <propertySection/>
  </repository>
</xsi:qaExport>
